{"version":3,"sources":["App.js","reportWebVitals.js","index.js","styles/Snake.module.css"],"names":["Config","CellType","Direction","x","y","Cell","type","className","styles","cellContainer","style","left","top","width","height","cell","backgroundColor","borderRadius","padding","getStyles","getFoodInRandomCell","Math","floor","random","expireTime","Date","getTime","App","getDefaultFood","useRef","useState","snake","setSnake","direction","setDirection","foods","setFoods","score","setScore","useEffect","runSingleStep","head","newHead","isSnake","test","find","position","newSnake","pop","timer","setInterval","clearInterval","isFood","newFoods","filter","food","eraseFood","newFood","currentTime","handleNavigation","event","key","window","addEventListener","removeEventListener","cells","push","container","header","length","grid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.a0a4aa1f.chunk.js","sourcesContent":["import { useEffect, useState, useRef } from \"react\";\nimport \"./App.css\";\nimport styles from \"./styles/Snake.module.css\";\n\nconst Config = {\n  height: 20,\n  width: 20,\n  cellSize: 32,\n};\n\nconst CellType = {\n  Snake: \"snake\",\n  Food: \"food\",\n  Empty: \"empty\",\n};\n\nconst Direction = {\n  Left: { x: -1, y: 0 },\n  Right: { x: 1, y: 0 },\n  Top: { x: 0, y: -1 },\n  Bottom: { x: 0, y: 1 },\n};\n\nconst Cell = ({ x, y, type }) => {\n  const getStyles = () => {\n    switch (type) {\n      case CellType.Snake:\n        return {\n          backgroundColor: \"yellowgreen\",\n          borderRadius: 8,\n          padding: 0,\n        };\n\n      case CellType.Food:\n        return {\n          backgroundColor: \"darkorange\",\n          borderRadius: 20,\n          width: 32,\n          height: 32,\n        };\n\n      default:\n        return {};\n    }\n  };\n  return (\n    <div\n      className={styles.cellContainer}\n      style={{\n        left: x * Config.cellSize,\n        top: y * Config.cellSize,\n        width: Config.cellSize,\n        height: Config.cellSize,\n      }}\n    >\n      <div className={styles.cell} style={getStyles()}></div>\n    </div>\n  );\n};\n\nconst getFoodInRandomCell = () => ({\n  x: Math.floor(Math.random() * Config.width),\n  y: Math.floor(Math.random() * Config.width),\n  expireTime: new Date().getTime() + 15000,\n});\n\nfunction App() {\n  const getDefaultSnake = () => [\n    { x: 8, y: 12 },\n    { x: 7, y: 12 },\n    { x: 6, y: 12 },\n  ];\n  const getDefaultFood = () => [\n    { x: 4, y: 10, expireTime: new Date().getTime() + 10000 },\n  ];\n  const grid = useRef();\n\n  // snake[0] is head and snake[snake.length - 1] is tail\n  const [snake, setSnake] = useState(getDefaultSnake());\n  const [direction, setDirection] = useState(Direction.Right);\n  const [foods, setFoods] = useState(getDefaultFood());\n  const [score, setScore] = useState(0);\n\n\n  //restart the game\n  const restartGame = () => {\n    setSnake(getDefaultSnake());\n    setFoods(getDefaultFood());\n    setDirection(Direction.Right);\n    setScore(0);\n  };\n\n  //remove the eaten food\n  const eraseFood = (position) => {\n    let newFoods = [...foods.filter(\n      (food) => position.x !== food.x || position.y !== food.y\n    )];\n    setFoods(newFoods);\n  };\n\n  // move the snake\n  useEffect(() => {\n    const runSingleStep = () => {\n      setSnake((snake) => {\n        const head = snake[0];\n        const newHead = { x: head.x + direction.x, y: head.y + direction.y };\n        //reappearing snake\n        if (newHead.x === -1) newHead.x = Config.width - 1;;\n        if (newHead.x === Config.width) newHead.x = 0;\n        if (newHead.y === -1) newHead.y = Config.height - 1;\n        if (newHead.y === Config.height) newHead.y = 0;\n\n        //restarting game\n        if (isSnake(newHead)) {\n          let test = isSnake(newHead);\n          // recheck for some glitch remain , hopefully will solve this someday\n          if (snake.find((position) => position.x === test.x && position.y === test.y)) {\n             restartGame();\n          }\n        }\n       \n        let newSnake = [newHead, ...snake];\n        newSnake.pop();\n        return newSnake;\n      });\n    };\n\n    runSingleStep();\n    const timer = setInterval(runSingleStep, 500);\n\n    return () => clearInterval(timer);\n  }, [direction]);\n\n \n  // update score and snake size whenever head touches a food\n  useEffect(() => {\n    const head = snake[0];\n    if (isFood(head)) {\n      setScore((score) => {\n        return score + 1;\n      });\n\n      eraseFood(head);\n\n      //change snake's size\n      setSnake((snake) => {\n        const head = snake[0];\n        const newHead = { x: head.x + direction.x, y: head.y + direction.y };\n\n        // make a new snake by extending head\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\n        const newSnake = [newHead, ...snake];\n        return newSnake;\n      });\n    }\n  }, [snake]);\n\n  // appear random food every 3 seconds\n  useEffect(() => {\n    const appearFood = () => {\n      setFoods((foods) => {\n        let newFood = getFoodInRandomCell();\n        while (isSnake(newFood) || isFood(newFood)) {\n          newFood = getFoodInRandomCell();\n        }\n        let newFoods = [newFood, ...foods];\n        return newFoods;\n      });\n    };\n\n    // appearFood();\n    const timer = setInterval(appearFood, 3000);\n    return () => clearInterval(timer);\n  }, []);\n\n  //disappearing expired food\n  useEffect(() => {\n    const disappearFood = () => {\n     let currentTime = new Date().getTime();\n      let newFoods;\n      setFoods((foods) => {\n        newFoods = [...foods.filter(food => food.expireTime > currentTime)];\n        return newFoods;\n      });\n    };\n\n    // removeFood();\n    const timer = setInterval(disappearFood, 100);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  useEffect(() => {\n    const handleNavigation = (event) => {\n      switch (event.key) {\n        case \"ArrowUp\":\n          setDirection((direction) => {\n            if (\n              direction.x === Direction.Bottom.x &&\n              direction.y === Direction.Bottom.y\n            )\n              return direction;\n            return Direction.Top;\n          });\n\n          break;\n\n        case \"ArrowDown\":\n          setDirection((direction) => {\n            if (\n              direction.x === Direction.Top.x &&\n              direction.y === Direction.Top.y\n            )\n              return direction;\n            return Direction.Bottom;\n          });\n\n          break;\n\n        case \"ArrowLeft\":\n          setDirection((direction) => {\n            if (\n              direction.x === Direction.Right.x &&\n              direction.y === Direction.Right.y\n            )\n              return direction;\n            return Direction.Left;\n          });\n\n          break;\n\n        case \"ArrowRight\":\n          setDirection((direction) => {\n            if (\n              direction.x === Direction.Left.x &&\n              direction.y === Direction.Left.y\n            )\n              return direction;\n            return Direction.Right;\n          });\n\n          break;\n      }\n    };\n    window.addEventListener(\"keydown\", handleNavigation);\n\n    return () => window.removeEventListener(\"keydown\", handleNavigation);\n  }, []);\n\n  // const isFood = ({ x, y }) => food?.x === x && food?.y === y;\n  const isFood = ({ x, y }) =>\n    foods.find((position) => position.x === x && position.y === y);\n\n  const isSnake = ({ x, y }) => {\n    return snake.find((position) => position.x === x && position.y === y);\n  }\n    \n\n  const cells = [];\n  for (let x = 0; x < Config.width; x++) {\n    for (let y = 0; y < Config.height; y++) {\n      let type = CellType.Empty;\n      if (isFood({ x, y })) {\n        type = CellType.Food;\n      } else if (isSnake({ x, y })) {\n        type = CellType.Snake;\n      }\n      cells.push(<Cell key={`${x}-${y}`} x={x} y={y} type={type} />);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className={styles.container}>\n        <div\n          className={styles.header}\n          style={{ width: Config.width * Config.cellSize }}\n        >\n          Score: {score}\n          <p>Foods on the board {foods.length}</p>\n        </div>\n        <div\n          className={styles.grid}\n          style={{\n            height: Config.height * Config.cellSize,\n            width: Config.width * Config.cellSize,\n          }}\n        >\n          {cells}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Snake_container__1copJ\",\"header\":\"Snake_header__Lyppd\",\"grid\":\"Snake_grid__hI3zJ\",\"cellContainer\":\"Snake_cellContainer__2TJ1a\",\"cell\":\"Snake_cell__qXnhA\"};"],"sourceRoot":""}